generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  fcmToken      String?    // store FCM device token here
  provider      String? // OAuth provider (google, slack, etc.)
  role          Role      @default(USER) // Default role is "User"
  managerId     String?   @unique
  assignedUsers String[]  @default([]) // Stores assigned User IDs if Manager
  tasks         String[]  @default([]) // Stores assigned Task IDs if User
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  description   String?
  userId        String? // Assigned user ID
  managerId     String? // Assigned by manager ID
  status        String   @default("Pending") // Task status
  reportMessage String?
  feedBack      String?
  createdAt     DateTime @default(now())
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
